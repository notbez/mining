const tg = window.Telegram.WebApp;
tg.expand(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

const userId = tg.initDataUnsafe?.user?.id || "123456"; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

document.addEventListener('DOMContentLoaded', async () => {
    await checkDailyLogin(); // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ –º–∏–Ω–∏-–∞–ø–ø
    await updateUserInfo(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateActiveTab(); // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–∫–æ–Ω–∫—É
});

// üìå –§–∏–∫—Å–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
async function checkDailyLogin() {
    try {
        await fetch('/user/daily-login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ telegramId: userId })
        });

        console.log("‚úÖ Daily login recorded!");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ö–æ–¥–∞:", error);
    }
}

// üìå –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
function updateActiveTab() {
    const pageMap = {
        "/": "profile",
        "/rating": "rating",
        "/mining": "mining",
        "/friends": "friends"
    };

    const currentPage = pageMap[window.location.pathname];

    document.querySelectorAll(".bottom-nav button").forEach(btn => {
        const img = btn.querySelector("img");
        const activeIcon = btn.getAttribute("data-active");
        const inactiveIcon = btn.getAttribute("data-inactive");

        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞—è ‚Äî –º–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É
        if (btn.getAttribute("data-page") === currentPage) {
            img.src = `/icons/${activeIcon}`;
        } else {
            img.src = `/icons/${inactiveIcon}`;
        }
    });
}

// üìå –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
function navigate(page) {
    window.location.href = page;
}

// üìÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
async function claimReward(type) {
    try {
        const response = await fetch(`/claim/${type}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ telegramId: userId })
        });

        const data = await response.json();
        if (data.success) {
            alert(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: ${data.stars} ‚≠ê`);
            window.location.href = "/";
        } else {
            alert(data.error);
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ ${type} Claim:`, error);
    }
}

// üí∞ –ü–æ–∫—É–ø–∫–∞ –±—É—Å—Ç–æ–≤
async function buyBoost(boostType) {
    try {
        const response = await fetch('/boost/buy-boost', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ telegramId: userId, boostType })
        });

        const data = await response.json();
        if (data.success) {
            alert(`‚úÖ –ë—É—Å—Ç ${boostType} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Å—Ç–∞—Ç–æ–∫: ${data.starsLeft} ‚≠ê`);
            window.location.href = "/";
        } else {
            alert(data.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±—É—Å—Ç–∞:', error);
    }
}

// üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
async function updateUserInfo() {
    try {
        const response = await fetch(`/user/${userId}`);
        const user = await response.json();

        document.getElementById('username').innerText = user.username || "User";
        document.getElementById('usernameInput').value = user.username || "";
        document.getElementById('stars').innerText = user.stars || 0;
        document.getElementById('rating').innerText = user.rating || 0;

        // üõ† –§–∏–∫—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (user.avatar) {
            console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É:", user.avatar); // –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å
            document.getElementById('avatarImg').src = user.avatar;
        } else {
            document.getElementById('avatarImg').src = "/icons/default-avatar.png";
        }

        document.getElementById('walletInput').value = user.wallet || "";
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
async function updateWallet() {
    const newWallet = document.getElementById('walletInput').value;

    await fetch('/user/update-wallet', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ telegramId: userId, wallet: newWallet })
    });

    alert("‚úÖ Wallet connected!");
    updateUserInfo();
}

// üìå –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∏–∫–∞
function showUsernameInput() {
    document.getElementById('username').style.display = 'none';
    document.getElementById('usernameEditSection').style.display = 'block';
}

// üìå –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º
async function updateUsername() {
    const newUsername = document.getElementById('usernameInput').value;

    if (!newUsername.trim()) {
        alert("‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
        return;
    }

    await fetch('/user/update-username', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ telegramId: userId, username: newUsername })
    });

    document.getElementById('username').innerText = newUsername;
    document.getElementById('username').style.display = 'block';
    document.getElementById('usernameEditSection').style.display = 'none';
}

// üìå –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
function showAvatarUpload() {
    document.getElementById('avatarUploadSection').style.display = 'block';
}

// üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
async function uploadAvatar() {
    const fileInput = document.getElementById('avatarInput');
    if (!fileInput.files.length) {
        alert("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!");
        return;
    }

    const formData = new FormData();
    formData.append('avatar', fileInput.files[0]);

    try {
        const response = await fetch(`/user/upload-avatar/${userId}`, {
            method: 'POST',
            body: formData
        });

        const data = await response.json();
        if (data.success) {
            document.getElementById('avatarImg').src = data.avatar;
            console.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞:", data.avatar);
            alert("‚úÖ Avatar uploaded!");
        } else {
            alert("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏.");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:", error);
        alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
    }
}